#!/bin/bash

# ============================================================================
# Script d'Installation Automatique - Data Lake + Data Warehouse + Kafka
# ============================================================================

set -e  # Arr√™t en cas d'erreur

echo "üöÄ Installation du projet Data Lake + Data Warehouse + Kafka Consumers"
echo "======================================================================"
echo ""

# Couleurs pour l'affichage
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${GREEN}‚úì${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

log_error() {
    echo -e "${RED}‚úó${NC} $1"
}

# ============================================================================
# 1. V√©rification des pr√©requis
# ============================================================================

echo "üìã V√©rification des pr√©requis..."
echo ""

# V√©rifier Python
if command -v python3 &> /dev/null; then
    PYTHON_VERSION=$(python3 --version)
    log_info "Python trouv√©: $PYTHON_VERSION"
else
    log_error "Python 3 non trouv√©. Veuillez l'installer."
    exit 1
fi

# V√©rifier Homebrew (macOS)
if [[ "$OSTYPE" == "darwin"* ]]; then
    if command -v brew &> /dev/null; then
        log_info "Homebrew trouv√©"
    else
        log_warning "Homebrew non trouv√©. Installation recommand√©e."
    fi
fi

echo ""

# ============================================================================
# 2. Installation de MySQL
# ============================================================================

echo "üóÑÔ∏è Installation de MySQL..."
echo ""

if command -v mysql &> /dev/null; then
    MYSQL_VERSION=$(mysql --version)
    log_info "MySQL d√©j√† install√©: $MYSQL_VERSION"
else
    log_warning "MySQL non trouv√©. Installation..."
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        brew install mysql
        log_info "MySQL install√© via Homebrew"
    else
        log_error "Veuillez installer MySQL manuellement"
        exit 1
    fi
fi

# D√©marrer MySQL
if [[ "$OSTYPE" == "darwin"* ]]; then
    brew services start mysql
    log_info "MySQL d√©marr√©"
    sleep 5  # Attendre que MySQL d√©marre
fi

echo ""

# ============================================================================
# 3. Cr√©ation de l'environnement virtuel Python
# ============================================================================

echo "üêç Cr√©ation de l'environnement virtuel Python..."
echo ""

if [ -d "venv" ]; then
    log_warning "Environnement virtuel d√©j√† existant"
else
    python3 -m venv venv
    log_info "Environnement virtuel cr√©√©"
fi

# Activer l'environnement virtuel
source venv/bin/activate
log_info "Environnement virtuel activ√©"

echo ""

# ============================================================================
# 4. Installation des d√©pendances Python
# ============================================================================

echo "üì¶ Installation des d√©pendances Python..."
echo ""

pip install --upgrade pip > /dev/null 2>&1
pip install -r requirements.txt
log_info "D√©pendances Python install√©es"

echo ""

# ============================================================================
# 5. Cr√©ation de la base de donn√©es MySQL
# ============================================================================

echo "üóÑÔ∏è Cr√©ation de la base de donn√©es MySQL..."
echo ""

# Demander le mot de passe MySQL (optionnel)
read -sp "Mot de passe MySQL root (laisser vide si pas de mot de passe): " MYSQL_PASSWORD
echo ""

if [ -z "$MYSQL_PASSWORD" ]; then
    MYSQL_CMD="mysql -u root"
else
    MYSQL_CMD="mysql -u root -p$MYSQL_PASSWORD"
fi

# Cr√©er la base de donn√©es
$MYSQL_CMD < sql/01_create_database.sql
log_info "Base de donn√©es cr√©√©e"

# Cr√©er les tables de dimension
$MYSQL_CMD < sql/02_create_dimension_tables.sql
log_info "Tables de dimension cr√©√©es"

# Cr√©er les tables de faits
$MYSQL_CMD < sql/03_create_fact_tables.sql
log_info "Tables de faits cr√©√©es"

# V√©rifier les tables
TABLE_COUNT=$($MYSQL_CMD -e "USE data_warehouse; SHOW TABLES;" | wc -l)
log_info "$((TABLE_COUNT - 1)) tables cr√©√©es dans data_warehouse"

echo ""

# ============================================================================
# 6. Cr√©ation de la structure du Data Lake
# ============================================================================

echo "üìÅ Cr√©ation de la structure du Data Lake..."
echo ""

python -c "from data_lake_config import ensure_directories; ensure_directories()"
log_info "Structure du Data Lake cr√©√©e"

echo ""

# ============================================================================
# 7. V√©rification de Kafka (optionnel)
# ============================================================================

echo "üîÑ V√©rification de Kafka (optionnel)..."
echo ""

if nc -zv localhost 9092 2>&1 | grep -q "succeeded"; then
    log_info "Kafka accessible sur localhost:9092"
    KAFKA_AVAILABLE=true
else
    log_warning "Kafka non accessible. Les consumers Kafka ne pourront pas d√©marrer."
    KAFKA_AVAILABLE=false
fi

echo ""

# ============================================================================
# 8. Tests de validation
# ============================================================================

echo "‚úÖ Tests de validation..."
echo ""

# Test des imports Python
python -c "import pandas, pyarrow, requests, mysql.connector, kafka; print('Imports OK')" 2>&1 | grep -q "Imports OK"
if [ $? -eq 0 ]; then
    log_info "Imports Python valid√©s"
else
    log_error "Erreur lors des imports Python"
fi

# Test de connexion MySQL
python -c "import mysql.connector; conn = mysql.connector.connect(host='localhost', user='root', password='$MYSQL_PASSWORD', database='data_warehouse'); conn.close(); print('MySQL OK')" 2>&1 | grep -q "MySQL OK"
if [ $? -eq 0 ]; then
    log_info "Connexion MySQL valid√©e"
else
    log_error "Erreur de connexion MySQL"
fi

echo ""

# ============================================================================
# 9. R√©sum√© de l'installation
# ============================================================================

echo "======================================================================"
echo "üéâ Installation termin√©e avec succ√®s!"
echo "======================================================================"
echo ""
echo "üìä Composants install√©s:"
echo "  ‚úì MySQL 9.x"
echo "  ‚úì Base de donn√©es: data_warehouse (6 tables)"
echo "  ‚úì Environnement Python virtuel"
echo "  ‚úì D√©pendances Python (pandas, pyarrow, mysql-connector, kafka-python)"
echo "  ‚úì Structure du Data Lake"
echo ""
echo "üöÄ Prochaines √©tapes:"
echo ""
echo "1. Activer l'environnement virtuel:"
echo "   source venv/bin/activate"
echo ""
echo "2. Configurer ksqlDB (√©diter data_lake_config.py):"
echo "   vim data_lake_config.py"
echo ""
echo "3. Mode Batch - Export depuis ksqlDB:"
echo "   python export_to_data_lake.py --all"
echo "   python sync_to_mysql.py --mysql-password '$MYSQL_PASSWORD'"
echo ""

if [ "$KAFKA_AVAILABLE" = true ]; then
    echo "4. Mode Streaming - Kafka Consumers:"
    echo "   python kafka_consumer_orchestrator.py --mode all --mysql-password '$MYSQL_PASSWORD'"
    echo ""
else
    echo "4. Mode Streaming - Kafka Consumers (Kafka non disponible):"
    echo "   D√©marrer Kafka puis:"
    echo "   python kafka_consumer_orchestrator.py --mode all --mysql-password '$MYSQL_PASSWORD'"
    echo ""
fi

echo "üìö Documentation:"
echo "  ‚Ä¢ QUICK_START.md - D√©marrage rapide"
echo "  ‚Ä¢ KAFKA_CONSUMERS_GUIDE.md - Guide Kafka"
echo "  ‚Ä¢ PROJECT_FINAL_SUMMARY.md - Vue d'ensemble compl√®te"
echo ""
echo "======================================================================"
