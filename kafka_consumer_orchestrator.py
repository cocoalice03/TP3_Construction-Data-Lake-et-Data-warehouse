"""
Orchestrateur de Kafka Consumers
Lance et g√®re les consumers pour le Data Lake et le Data Warehouse
"""
import argparse
import logging
import sys
import signal
import time
from multiprocessing import Process
from typing import List

from kafka_consumer_datalake import DataLakeKafkaConsumer
from kafka_consumer_warehouse import WarehouseKafkaConsumer
from kafka_config import LOGS_DIR, LOG_FORMAT, LOG_LEVEL
from datetime import datetime


# Configuration du logging
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format=LOG_FORMAT,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(
            LOGS_DIR / f"kafka_orchestrator_{datetime.now().strftime('%Y%m')}.log"
        )
    ]
)
logger = logging.getLogger(__name__)


class KafkaConsumerOrchestrator:
    """Orchestrateur pour g√©rer plusieurs consumers Kafka"""
    
    def __init__(self, enable_datalake: bool = True, enable_warehouse: bool = True, mysql_password: str = ""):
        """
        Initialise l'orchestrateur
        
        Args:
            enable_datalake: Activer le consumer Data Lake
            enable_warehouse: Activer le consumer Data Warehouse
            mysql_password: Mot de passe MySQL
        """
        self.enable_datalake = enable_datalake
        self.enable_warehouse = enable_warehouse
        self.mysql_password = mysql_password
        
        self.processes: List[Process] = []
        self.running = False
        
        # Gestion des signaux pour arr√™t gracieux
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        logger.info("Orchestrateur initialis√©")
    
    def signal_handler(self, signum, frame):
        """G√®re les signaux d'arr√™t"""
        logger.info(f"Signal {signum} re√ßu, arr√™t des consumers...")
        self.stop()
    
    def start_datalake_consumer(self):
        """D√©marre le consumer Data Lake dans un processus s√©par√©"""
        logger.info("D√©marrage du consumer Data Lake...")
        consumer = DataLakeKafkaConsumer()
        consumer.consume()
    
    def start_warehouse_consumer(self):
        """D√©marre le consumer Data Warehouse dans un processus s√©par√©"""
        logger.info("D√©marrage du consumer Data Warehouse...")
        consumer = WarehouseKafkaConsumer(mysql_password=self.mysql_password)
        consumer.consume()
    
    def start(self):
        """D√©marre tous les consumers activ√©s"""
        logger.info("üöÄ D√©marrage de l'orchestrateur Kafka")
        self.running = True
        
        # D√©marrer le consumer Data Lake
        if self.enable_datalake:
            logger.info("Lancement du consumer Data Lake")
            p_datalake = Process(
                target=self.start_datalake_consumer,
                name="DataLakeConsumer"
            )
            p_datalake.start()
            self.processes.append(p_datalake)
            logger.info(f"‚úì Consumer Data Lake d√©marr√© (PID: {p_datalake.pid})")
        
        # D√©marrer le consumer Data Warehouse
        if self.enable_warehouse:
            logger.info("Lancement du consumer Data Warehouse")
            p_warehouse = Process(
                target=self.start_warehouse_consumer,
                name="WarehouseConsumer"
            )
            p_warehouse.start()
            self.processes.append(p_warehouse)
            logger.info(f"‚úì Consumer Data Warehouse d√©marr√© (PID: {p_warehouse.pid})")
        
        # Attendre que tous les processus se terminent
        try:
            while self.running:
                # V√©rifier l'√©tat des processus
                for process in self.processes:
                    if not process.is_alive():
                        logger.warning(f"Processus {process.name} (PID: {process.pid}) s'est arr√™t√©")
                        self.processes.remove(process)
                
                # Si tous les processus sont arr√™t√©s, sortir
                if not self.processes:
                    logger.info("Tous les processus sont arr√™t√©s")
                    break
                
                time.sleep(5)
        
        except KeyboardInterrupt:
            logger.info("Interruption clavier d√©tect√©e")
            self.stop()
    
    def stop(self):
        """Arr√™te tous les consumers"""
        logger.info("Arr√™t de tous les consumers...")
        self.running = False
        
        for process in self.processes:
            if process.is_alive():
                logger.info(f"Arr√™t du processus {process.name} (PID: {process.pid})")
                process.terminate()
                process.join(timeout=10)
                
                if process.is_alive():
                    logger.warning(f"Processus {process.name} ne r√©pond pas, kill forc√©")
                    process.kill()
                    process.join()
        
        logger.info("‚úì Tous les consumers sont arr√™t√©s")
    
    def status(self):
        """Affiche le statut des consumers"""
        logger.info("=== Statut des Consumers ===")
        
        if not self.processes:
            logger.info("Aucun consumer en cours d'ex√©cution")
            return
        
        for process in self.processes:
            status = "Running" if process.is_alive() else "Stopped"
            logger.info(f"- {process.name} (PID: {process.pid}): {status}")


def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(
        description="Orchestrateur de Kafka Consumers"
    )
    parser.add_argument(
        "--mode",
        type=str,
        choices=["all", "datalake", "warehouse"],
        default="all",
        help="Mode d'ex√©cution: all (d√©faut), datalake, ou warehouse"
    )
    parser.add_argument(
        "--mysql-password",
        type=str,
        default="",
        help="Mot de passe MySQL (requis si mode=warehouse ou mode=all)"
    )
    
    args = parser.parse_args()
    
    # D√©terminer quels consumers activer
    enable_datalake = args.mode in ["all", "datalake"]
    enable_warehouse = args.mode in ["all", "warehouse"]
    
    # V√©rifier que le mot de passe MySQL est fourni si n√©cessaire
    if enable_warehouse and not args.mysql_password:
        logger.warning("Mot de passe MySQL non fourni, utilisation du mot de passe vide")
    
    try:
        orchestrator = KafkaConsumerOrchestrator(
            enable_datalake=enable_datalake,
            enable_warehouse=enable_warehouse,
            mysql_password=args.mysql_password
        )
        
        orchestrator.start()
    
    except Exception as e:
        logger.error(f"Erreur fatale: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
